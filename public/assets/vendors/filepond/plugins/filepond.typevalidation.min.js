(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory():typeof define==="function"&&define.amd?define(factory):(global=global||self,global.FilePondPluginFileValidateType=factory())})(this,function(){"use strict";var plugin=function plugin(_ref){var addFilter=_ref.addFilter,utils=_ref.utils;var Type=utils.Type,isString=utils.isString,replaceInString=utils.replaceInString,guesstimateMimeType=utils.guesstimateMimeType,getExtensionFromFilename=utils.getExtensionFromFilename,getFilenameFromURL=utils.getFilenameFromURL;var mimeTypeMatchesWildCard=function mimeTypeMatchesWildCard(mimeType,wildcard){var mimeTypeGroup=(/^[^/]+/.exec(mimeType)||[]).pop();var wildcardGroup=wildcard.slice(0,-2);return mimeTypeGroup===wildcardGroup};var isValidMimeType=function isValidMimeType(acceptedTypes,userInputType){return acceptedTypes.some(function(acceptedType){if(/\*$/.test(acceptedType)){return mimeTypeMatchesWildCard(userInputType,acceptedType)}return acceptedType===userInputType})};var getItemType=function getItemType(item){var type="";if(isString(item)){var filename=getFilenameFromURL(item);var extension=getExtensionFromFilename(filename);if(extension){type=guesstimateMimeType(extension)}}else{type=item.type}return type};var validateFile=function validateFile(item,acceptedFileTypes,typeDetector){if(acceptedFileTypes.length===0){return true}var type=getItemType(item);if(!typeDetector){return isValidMimeType(acceptedFileTypes,type)}return new Promise(function(resolve,reject){typeDetector(item,type).then(function(detectedType){if(isValidMimeType(acceptedFileTypes,detectedType)){resolve()}else{reject()}}).catch(reject)})};var applyMimeTypeMap=function applyMimeTypeMap(map){return function(acceptedFileType){return map[acceptedFileType]===null?false:map[acceptedFileType]||acceptedFileType}};addFilter("SET_ATTRIBUTE_TO_OPTION_MAP",function(map){return Object.assign(map,{accept:"acceptedFileTypes"})});addFilter("ALLOW_HOPPER_ITEM",function(file,_ref2){var query=_ref2.query;if(!query("GET_ALLOW_FILE_TYPE_VALIDATION")){return true}return validateFile(file,query("GET_ACCEPTED_FILE_TYPES"))});addFilter("LOAD_FILE",function(file,_ref3){var query=_ref3.query;return new Promise(function(resolve,reject){if(!query("GET_ALLOW_FILE_TYPE_VALIDATION")){resolve(file);return}var acceptedFileTypes=query("GET_ACCEPTED_FILE_TYPES");var typeDetector=query("GET_FILE_VALIDATE_TYPE_DETECT_TYPE");var validationResult=validateFile(file,acceptedFileTypes,typeDetector);var handleRejection=function handleRejection(){var acceptedFileTypesMapped=acceptedFileTypes.map(applyMimeTypeMap(query("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES_MAP"))).filter(function(label){return label!==false});reject({status:{main:query("GET_LABEL_FILE_TYPE_NOT_ALLOWED"),sub:replaceInString(query("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES"),{allTypes:acceptedFileTypesMapped.join(", "),allButLastType:acceptedFileTypesMapped.slice(0,-1).join(", "),lastType:acceptedFileTypesMapped[acceptedFileTypesMapped.length-1]})}})};if(typeof validationResult==="boolean"){if(!validationResult){return handleRejection()}return resolve(file)}validationResult.then(function(){resolve(file)}).catch(handleRejection)})});return{options:{allowFileTypeValidation:[true,Type.BOOLEAN],acceptedFileTypes:[[],Type.ARRAY],labelFileTypeNotAllowed:["File is of invalid type",Type.STRING],fileValidateTypeLabelExpectedTypes:["Expects {allButLastType} or {lastType}",Type.STRING],fileValidateTypeLabelExpectedTypesMap:[{},Type.OBJECT],fileValidateTypeDetectType:[null,Type.FUNCTION]}}};var isBrowser=typeof window!=="undefined"&&typeof window.document!=="undefined";if(isBrowser){document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:plugin}))}return plugin});